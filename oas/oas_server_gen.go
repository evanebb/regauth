// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	RepositoryHandler
	TeamHandler
	TokenHandler
	UserHandler
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// RepositoryHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Repository
type RepositoryHandler interface {
	// CreateRepository implements createRepository operation.
	//
	// Create repository.
	//
	// POST /v1/repositories
	CreateRepository(ctx context.Context, req *RepositoryRequest) (*RepositoryResponse, error)
	// DeleteRepository implements deleteRepository operation.
	//
	// Delete repository.
	//
	// DELETE /v1/repositories/{namespace}/{name}
	DeleteRepository(ctx context.Context, params DeleteRepositoryParams) error
	// GetRepository implements getRepository operation.
	//
	// Get repository.
	//
	// GET /v1/repositories/{namespace}/{name}
	GetRepository(ctx context.Context, params GetRepositoryParams) (*RepositoryResponse, error)
	// ListRepositories implements listRepositories operation.
	//
	// List repositories.
	//
	// GET /v1/repositories
	ListRepositories(ctx context.Context) ([]RepositoryResponse, error)
}

// TeamHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Team
type TeamHandler interface {
	// AddTeamMember implements addTeamMember operation.
	//
	// Add team member.
	//
	// POST /v1/teams/{name}/members
	AddTeamMember(ctx context.Context, req *TeamMemberRequest, params AddTeamMemberParams) (*TeamMemberResponse, error)
	// CreateTeam implements createTeam operation.
	//
	// Create team.
	//
	// POST /v1/teams
	CreateTeam(ctx context.Context, req *TeamRequest) (*TeamResponse, error)
	// DeleteTeam implements deleteTeam operation.
	//
	// Delete team.
	//
	// DELETE /v1/teams/{name}
	DeleteTeam(ctx context.Context, params DeleteTeamParams) error
	// GetTeam implements getTeam operation.
	//
	// Get team.
	//
	// GET /v1/teams/{name}
	GetTeam(ctx context.Context, params GetTeamParams) (*TeamResponse, error)
	// ListTeamMembers implements listTeamMembers operation.
	//
	// List team members.
	//
	// GET /v1/teams/{name}/members
	ListTeamMembers(ctx context.Context, params ListTeamMembersParams) ([]TeamMemberResponse, error)
	// ListTeams implements listTeams operation.
	//
	// List teams.
	//
	// GET /v1/teams
	ListTeams(ctx context.Context) ([]TeamResponse, error)
	// RemoveTeamMember implements removeTeamMember operation.
	//
	// Remove team member.
	//
	// DELETE /v1/teams/{name}/members/{username}
	RemoveTeamMember(ctx context.Context, params RemoveTeamMemberParams) error
}

// TokenHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Token
type TokenHandler interface {
	// CreatePersonalAccessToken implements createPersonalAccessToken operation.
	//
	// Create personal access token.
	//
	// POST /v1/tokens
	CreatePersonalAccessToken(ctx context.Context, req *PersonalAccessTokenRequest) (*PersonalAccessTokenCreationResponse, error)
	// DeletePersonalAccessToken implements deletePersonalAccessToken operation.
	//
	// Delete personal access token.
	//
	// DELETE /v1/tokens/{id}
	DeletePersonalAccessToken(ctx context.Context, params DeletePersonalAccessTokenParams) error
	// GetPersonalAccessToken implements getPersonalAccessToken operation.
	//
	// Get personal access token.
	//
	// GET /v1/tokens/{id}
	GetPersonalAccessToken(ctx context.Context, params GetPersonalAccessTokenParams) (*PersonalAccessTokenResponse, error)
	// ListPersonalAccessTokens implements listPersonalAccessTokens operation.
	//
	// List personal access tokens.
	//
	// GET /v1/tokens
	ListPersonalAccessTokens(ctx context.Context) ([]PersonalAccessTokenResponse, error)
}

// UserHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: User
type UserHandler interface {
	// ChangeUserPassword implements changeUserPassword operation.
	//
	// Change password for user.
	//
	// POST /v1/users/{username}/password
	ChangeUserPassword(ctx context.Context, req *UserPasswordChangeRequest, params ChangeUserPasswordParams) error
	// CreateUser implements createUser operation.
	//
	// Create user.
	//
	// POST /v1/users
	CreateUser(ctx context.Context, req *UserRequest) (*UserResponse, error)
	// DeleteUser implements deleteUser operation.
	//
	// Delete user.
	//
	// DELETE /v1/users/{username}
	DeleteUser(ctx context.Context, params DeleteUserParams) error
	// GetUser implements getUser operation.
	//
	// Get user.
	//
	// GET /v1/users/{username}
	GetUser(ctx context.Context, params GetUserParams) (*UserResponse, error)
	// ListUsers implements listUsers operation.
	//
	// List users.
	//
	// GET /v1/users
	ListUsers(ctx context.Context) ([]UserResponse, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
