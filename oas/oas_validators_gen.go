// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *PersonalAccessTokenCreationResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permission.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PersonalAccessTokenCreationResponsePermission) Validate() error {
	switch s {
	case "readOnly":
		return nil
	case "readWrite":
		return nil
	case "readWriteDelete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PersonalAccessTokenRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permission.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PersonalAccessTokenRequestPermission) Validate() error {
	switch s {
	case "readOnly":
		return nil
	case "readWrite":
		return nil
	case "readWriteDelete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PersonalAccessTokenResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permission.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PersonalAccessTokenResponsePermission) Validate() error {
	switch s {
	case "readOnly":
		return nil
	case "readWrite":
		return nil
	case "readWriteDelete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RepositoryRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RepositoryRequestVisibility) Validate() error {
	switch s {
	case "private":
		return nil
	case "public":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RepositoryResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RepositoryResponseVisibility) Validate() error {
	switch s {
	case "private":
		return nil
	case "public":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TeamMemberRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TeamMemberRequestRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TeamMemberResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TeamMemberResponseRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserRequestRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserResponseRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
