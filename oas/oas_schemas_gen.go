// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// ChangeUserPasswordNoContent is response for ChangeUserPassword operation.
type ChangeUserPasswordNoContent struct{}

// DeletePersonalAccessTokenNoContent is response for DeletePersonalAccessToken operation.
type DeletePersonalAccessTokenNoContent struct{}

// DeleteRepositoryNoContent is response for DeleteRepository operation.
type DeleteRepositoryNoContent struct{}

// DeleteTeamNoContent is response for DeleteTeam operation.
type DeleteTeamNoContent struct{}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type PersonalAccessToken struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *PersonalAccessToken) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *PersonalAccessToken) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *PersonalAccessToken) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *PersonalAccessToken) SetRoles(val []string) {
	s.Roles = val
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessTokenCreationResponse
type PersonalAccessTokenCreationResponse struct {
	ID             uuid.UUID                                     `json:"id"`
	CreatedAt      time.Time                                     `json:"createdAt"`
	Description    string                                        `json:"description"`
	Permission     PersonalAccessTokenCreationResponsePermission `json:"permission"`
	ExpirationDate time.Time                                     `json:"expirationDate"`
	// The newly generated plain-text token. This needs to be stored by the caller, since it cannot be
	// retrieved afterwards.
	Token string `json:"token"`
}

// GetID returns the value of ID.
func (s *PersonalAccessTokenCreationResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PersonalAccessTokenCreationResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetDescription returns the value of Description.
func (s *PersonalAccessTokenCreationResponse) GetDescription() string {
	return s.Description
}

// GetPermission returns the value of Permission.
func (s *PersonalAccessTokenCreationResponse) GetPermission() PersonalAccessTokenCreationResponsePermission {
	return s.Permission
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *PersonalAccessTokenCreationResponse) GetExpirationDate() time.Time {
	return s.ExpirationDate
}

// GetToken returns the value of Token.
func (s *PersonalAccessTokenCreationResponse) GetToken() string {
	return s.Token
}

// SetID sets the value of ID.
func (s *PersonalAccessTokenCreationResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PersonalAccessTokenCreationResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetDescription sets the value of Description.
func (s *PersonalAccessTokenCreationResponse) SetDescription(val string) {
	s.Description = val
}

// SetPermission sets the value of Permission.
func (s *PersonalAccessTokenCreationResponse) SetPermission(val PersonalAccessTokenCreationResponsePermission) {
	s.Permission = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *PersonalAccessTokenCreationResponse) SetExpirationDate(val time.Time) {
	s.ExpirationDate = val
}

// SetToken sets the value of Token.
func (s *PersonalAccessTokenCreationResponse) SetToken(val string) {
	s.Token = val
}

type PersonalAccessTokenCreationResponsePermission string

const (
	PersonalAccessTokenCreationResponsePermissionReadOnly        PersonalAccessTokenCreationResponsePermission = "readOnly"
	PersonalAccessTokenCreationResponsePermissionReadWrite       PersonalAccessTokenCreationResponsePermission = "readWrite"
	PersonalAccessTokenCreationResponsePermissionReadWriteDelete PersonalAccessTokenCreationResponsePermission = "readWriteDelete"
)

// AllValues returns all PersonalAccessTokenCreationResponsePermission values.
func (PersonalAccessTokenCreationResponsePermission) AllValues() []PersonalAccessTokenCreationResponsePermission {
	return []PersonalAccessTokenCreationResponsePermission{
		PersonalAccessTokenCreationResponsePermissionReadOnly,
		PersonalAccessTokenCreationResponsePermissionReadWrite,
		PersonalAccessTokenCreationResponsePermissionReadWriteDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenCreationResponsePermission) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenCreationResponsePermissionReadOnly:
		return []byte(s), nil
	case PersonalAccessTokenCreationResponsePermissionReadWrite:
		return []byte(s), nil
	case PersonalAccessTokenCreationResponsePermissionReadWriteDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenCreationResponsePermission) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenCreationResponsePermission(data) {
	case PersonalAccessTokenCreationResponsePermissionReadOnly:
		*s = PersonalAccessTokenCreationResponsePermissionReadOnly
		return nil
	case PersonalAccessTokenCreationResponsePermissionReadWrite:
		*s = PersonalAccessTokenCreationResponsePermissionReadWrite
		return nil
	case PersonalAccessTokenCreationResponsePermissionReadWriteDelete:
		*s = PersonalAccessTokenCreationResponsePermissionReadWriteDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PersonalAccessTokenRequest
type PersonalAccessTokenRequest struct {
	Description    string                               `json:"description"`
	Permission     PersonalAccessTokenRequestPermission `json:"permission"`
	ExpirationDate time.Time                            `json:"expirationDate"`
}

// GetDescription returns the value of Description.
func (s *PersonalAccessTokenRequest) GetDescription() string {
	return s.Description
}

// GetPermission returns the value of Permission.
func (s *PersonalAccessTokenRequest) GetPermission() PersonalAccessTokenRequestPermission {
	return s.Permission
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *PersonalAccessTokenRequest) GetExpirationDate() time.Time {
	return s.ExpirationDate
}

// SetDescription sets the value of Description.
func (s *PersonalAccessTokenRequest) SetDescription(val string) {
	s.Description = val
}

// SetPermission sets the value of Permission.
func (s *PersonalAccessTokenRequest) SetPermission(val PersonalAccessTokenRequestPermission) {
	s.Permission = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *PersonalAccessTokenRequest) SetExpirationDate(val time.Time) {
	s.ExpirationDate = val
}

type PersonalAccessTokenRequestPermission string

const (
	PersonalAccessTokenRequestPermissionReadOnly        PersonalAccessTokenRequestPermission = "readOnly"
	PersonalAccessTokenRequestPermissionReadWrite       PersonalAccessTokenRequestPermission = "readWrite"
	PersonalAccessTokenRequestPermissionReadWriteDelete PersonalAccessTokenRequestPermission = "readWriteDelete"
)

// AllValues returns all PersonalAccessTokenRequestPermission values.
func (PersonalAccessTokenRequestPermission) AllValues() []PersonalAccessTokenRequestPermission {
	return []PersonalAccessTokenRequestPermission{
		PersonalAccessTokenRequestPermissionReadOnly,
		PersonalAccessTokenRequestPermissionReadWrite,
		PersonalAccessTokenRequestPermissionReadWriteDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenRequestPermission) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenRequestPermissionReadOnly:
		return []byte(s), nil
	case PersonalAccessTokenRequestPermissionReadWrite:
		return []byte(s), nil
	case PersonalAccessTokenRequestPermissionReadWriteDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenRequestPermission) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenRequestPermission(data) {
	case PersonalAccessTokenRequestPermissionReadOnly:
		*s = PersonalAccessTokenRequestPermissionReadOnly
		return nil
	case PersonalAccessTokenRequestPermissionReadWrite:
		*s = PersonalAccessTokenRequestPermissionReadWrite
		return nil
	case PersonalAccessTokenRequestPermissionReadWriteDelete:
		*s = PersonalAccessTokenRequestPermissionReadWriteDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PersonalAccessTokenResponse
type PersonalAccessTokenResponse struct {
	ID             uuid.UUID                             `json:"id"`
	CreatedAt      time.Time                             `json:"createdAt"`
	Description    string                                `json:"description"`
	Permission     PersonalAccessTokenResponsePermission `json:"permission"`
	ExpirationDate time.Time                             `json:"expirationDate"`
}

// GetID returns the value of ID.
func (s *PersonalAccessTokenResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PersonalAccessTokenResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetDescription returns the value of Description.
func (s *PersonalAccessTokenResponse) GetDescription() string {
	return s.Description
}

// GetPermission returns the value of Permission.
func (s *PersonalAccessTokenResponse) GetPermission() PersonalAccessTokenResponsePermission {
	return s.Permission
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *PersonalAccessTokenResponse) GetExpirationDate() time.Time {
	return s.ExpirationDate
}

// SetID sets the value of ID.
func (s *PersonalAccessTokenResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PersonalAccessTokenResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetDescription sets the value of Description.
func (s *PersonalAccessTokenResponse) SetDescription(val string) {
	s.Description = val
}

// SetPermission sets the value of Permission.
func (s *PersonalAccessTokenResponse) SetPermission(val PersonalAccessTokenResponsePermission) {
	s.Permission = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *PersonalAccessTokenResponse) SetExpirationDate(val time.Time) {
	s.ExpirationDate = val
}

type PersonalAccessTokenResponsePermission string

const (
	PersonalAccessTokenResponsePermissionReadOnly        PersonalAccessTokenResponsePermission = "readOnly"
	PersonalAccessTokenResponsePermissionReadWrite       PersonalAccessTokenResponsePermission = "readWrite"
	PersonalAccessTokenResponsePermissionReadWriteDelete PersonalAccessTokenResponsePermission = "readWriteDelete"
)

// AllValues returns all PersonalAccessTokenResponsePermission values.
func (PersonalAccessTokenResponsePermission) AllValues() []PersonalAccessTokenResponsePermission {
	return []PersonalAccessTokenResponsePermission{
		PersonalAccessTokenResponsePermissionReadOnly,
		PersonalAccessTokenResponsePermissionReadWrite,
		PersonalAccessTokenResponsePermissionReadWriteDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PersonalAccessTokenResponsePermission) MarshalText() ([]byte, error) {
	switch s {
	case PersonalAccessTokenResponsePermissionReadOnly:
		return []byte(s), nil
	case PersonalAccessTokenResponsePermissionReadWrite:
		return []byte(s), nil
	case PersonalAccessTokenResponsePermissionReadWriteDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PersonalAccessTokenResponsePermission) UnmarshalText(data []byte) error {
	switch PersonalAccessTokenResponsePermission(data) {
	case PersonalAccessTokenResponsePermissionReadOnly:
		*s = PersonalAccessTokenResponsePermissionReadOnly
		return nil
	case PersonalAccessTokenResponsePermissionReadWrite:
		*s = PersonalAccessTokenResponsePermissionReadWrite
		return nil
	case PersonalAccessTokenResponsePermissionReadWriteDelete:
		*s = PersonalAccessTokenResponsePermissionReadWriteDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// RemoveTeamMemberNoContent is response for RemoveTeamMember operation.
type RemoveTeamMemberNoContent struct{}

// Ref: #/components/schemas/RepositoryRequest
type RepositoryRequest struct {
	Namespace  string                      `json:"namespace"`
	Name       string                      `json:"name"`
	Visibility RepositoryRequestVisibility `json:"visibility"`
}

// GetNamespace returns the value of Namespace.
func (s *RepositoryRequest) GetNamespace() string {
	return s.Namespace
}

// GetName returns the value of Name.
func (s *RepositoryRequest) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *RepositoryRequest) GetVisibility() RepositoryRequestVisibility {
	return s.Visibility
}

// SetNamespace sets the value of Namespace.
func (s *RepositoryRequest) SetNamespace(val string) {
	s.Namespace = val
}

// SetName sets the value of Name.
func (s *RepositoryRequest) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *RepositoryRequest) SetVisibility(val RepositoryRequestVisibility) {
	s.Visibility = val
}

type RepositoryRequestVisibility string

const (
	RepositoryRequestVisibilityPrivate RepositoryRequestVisibility = "private"
	RepositoryRequestVisibilityPublic  RepositoryRequestVisibility = "public"
)

// AllValues returns all RepositoryRequestVisibility values.
func (RepositoryRequestVisibility) AllValues() []RepositoryRequestVisibility {
	return []RepositoryRequestVisibility{
		RepositoryRequestVisibilityPrivate,
		RepositoryRequestVisibilityPublic,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RepositoryRequestVisibility) MarshalText() ([]byte, error) {
	switch s {
	case RepositoryRequestVisibilityPrivate:
		return []byte(s), nil
	case RepositoryRequestVisibilityPublic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RepositoryRequestVisibility) UnmarshalText(data []byte) error {
	switch RepositoryRequestVisibility(data) {
	case RepositoryRequestVisibilityPrivate:
		*s = RepositoryRequestVisibilityPrivate
		return nil
	case RepositoryRequestVisibilityPublic:
		*s = RepositoryRequestVisibilityPublic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RepositoryResponse
type RepositoryResponse struct {
	ID         uuid.UUID                    `json:"id"`
	CreatedAt  time.Time                    `json:"createdAt"`
	Namespace  string                       `json:"namespace"`
	Name       string                       `json:"name"`
	Visibility RepositoryResponseVisibility `json:"visibility"`
}

// GetID returns the value of ID.
func (s *RepositoryResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RepositoryResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetNamespace returns the value of Namespace.
func (s *RepositoryResponse) GetNamespace() string {
	return s.Namespace
}

// GetName returns the value of Name.
func (s *RepositoryResponse) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *RepositoryResponse) GetVisibility() RepositoryResponseVisibility {
	return s.Visibility
}

// SetID sets the value of ID.
func (s *RepositoryResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RepositoryResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetNamespace sets the value of Namespace.
func (s *RepositoryResponse) SetNamespace(val string) {
	s.Namespace = val
}

// SetName sets the value of Name.
func (s *RepositoryResponse) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *RepositoryResponse) SetVisibility(val RepositoryResponseVisibility) {
	s.Visibility = val
}

type RepositoryResponseVisibility string

const (
	RepositoryResponseVisibilityPrivate RepositoryResponseVisibility = "private"
	RepositoryResponseVisibilityPublic  RepositoryResponseVisibility = "public"
)

// AllValues returns all RepositoryResponseVisibility values.
func (RepositoryResponseVisibility) AllValues() []RepositoryResponseVisibility {
	return []RepositoryResponseVisibility{
		RepositoryResponseVisibilityPrivate,
		RepositoryResponseVisibilityPublic,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RepositoryResponseVisibility) MarshalText() ([]byte, error) {
	switch s {
	case RepositoryResponseVisibilityPrivate:
		return []byte(s), nil
	case RepositoryResponseVisibilityPublic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RepositoryResponseVisibility) UnmarshalText(data []byte) error {
	switch RepositoryResponseVisibility(data) {
	case RepositoryResponseVisibilityPrivate:
		*s = RepositoryResponseVisibilityPrivate
		return nil
	case RepositoryResponseVisibilityPublic:
		*s = RepositoryResponseVisibilityPublic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TeamMemberRequest
type TeamMemberRequest struct {
	Username string                `json:"username"`
	Role     TeamMemberRequestRole `json:"role"`
}

// GetUsername returns the value of Username.
func (s *TeamMemberRequest) GetUsername() string {
	return s.Username
}

// GetRole returns the value of Role.
func (s *TeamMemberRequest) GetRole() TeamMemberRequestRole {
	return s.Role
}

// SetUsername sets the value of Username.
func (s *TeamMemberRequest) SetUsername(val string) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *TeamMemberRequest) SetRole(val TeamMemberRequestRole) {
	s.Role = val
}

type TeamMemberRequestRole string

const (
	TeamMemberRequestRoleAdmin TeamMemberRequestRole = "admin"
	TeamMemberRequestRoleUser  TeamMemberRequestRole = "user"
)

// AllValues returns all TeamMemberRequestRole values.
func (TeamMemberRequestRole) AllValues() []TeamMemberRequestRole {
	return []TeamMemberRequestRole{
		TeamMemberRequestRoleAdmin,
		TeamMemberRequestRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TeamMemberRequestRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamMemberRequestRoleAdmin:
		return []byte(s), nil
	case TeamMemberRequestRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamMemberRequestRole) UnmarshalText(data []byte) error {
	switch TeamMemberRequestRole(data) {
	case TeamMemberRequestRoleAdmin:
		*s = TeamMemberRequestRoleAdmin
		return nil
	case TeamMemberRequestRoleUser:
		*s = TeamMemberRequestRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/TeamMemberResponse
type TeamMemberResponse struct {
	UserId    uuid.UUID              `json:"userId"`
	CreatedAt time.Time              `json:"createdAt"`
	Username  string                 `json:"username"`
	Role      TeamMemberResponseRole `json:"role"`
}

// GetUserId returns the value of UserId.
func (s *TeamMemberResponse) GetUserId() uuid.UUID {
	return s.UserId
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamMemberResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUsername returns the value of Username.
func (s *TeamMemberResponse) GetUsername() string {
	return s.Username
}

// GetRole returns the value of Role.
func (s *TeamMemberResponse) GetRole() TeamMemberResponseRole {
	return s.Role
}

// SetUserId sets the value of UserId.
func (s *TeamMemberResponse) SetUserId(val uuid.UUID) {
	s.UserId = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamMemberResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUsername sets the value of Username.
func (s *TeamMemberResponse) SetUsername(val string) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *TeamMemberResponse) SetRole(val TeamMemberResponseRole) {
	s.Role = val
}

type TeamMemberResponseRole string

const (
	TeamMemberResponseRoleAdmin TeamMemberResponseRole = "admin"
	TeamMemberResponseRoleUser  TeamMemberResponseRole = "user"
)

// AllValues returns all TeamMemberResponseRole values.
func (TeamMemberResponseRole) AllValues() []TeamMemberResponseRole {
	return []TeamMemberResponseRole{
		TeamMemberResponseRoleAdmin,
		TeamMemberResponseRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TeamMemberResponseRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamMemberResponseRoleAdmin:
		return []byte(s), nil
	case TeamMemberResponseRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamMemberResponseRole) UnmarshalText(data []byte) error {
	switch TeamMemberResponseRole(data) {
	case TeamMemberResponseRoleAdmin:
		*s = TeamMemberResponseRoleAdmin
		return nil
	case TeamMemberResponseRoleUser:
		*s = TeamMemberResponseRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TeamRequest
type TeamRequest struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *TeamRequest) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *TeamRequest) SetName(val string) {
	s.Name = val
}

// Merged schema.
// Ref: #/components/schemas/TeamResponse
type TeamResponse struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	Name      string    `json:"name"`
}

// GetID returns the value of ID.
func (s *TeamResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetName returns the value of Name.
func (s *TeamResponse) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *TeamResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetName sets the value of Name.
func (s *TeamResponse) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/UserPasswordChangeRequest
type UserPasswordChangeRequest struct {
	Password string `json:"password"`
}

// GetPassword returns the value of Password.
func (s *UserPasswordChangeRequest) GetPassword() string {
	return s.Password
}

// SetPassword sets the value of Password.
func (s *UserPasswordChangeRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/UserRequest
type UserRequest struct {
	Username string          `json:"username"`
	Role     UserRequestRole `json:"role"`
}

// GetUsername returns the value of Username.
func (s *UserRequest) GetUsername() string {
	return s.Username
}

// GetRole returns the value of Role.
func (s *UserRequest) GetRole() UserRequestRole {
	return s.Role
}

// SetUsername sets the value of Username.
func (s *UserRequest) SetUsername(val string) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *UserRequest) SetRole(val UserRequestRole) {
	s.Role = val
}

type UserRequestRole string

const (
	UserRequestRoleAdmin UserRequestRole = "admin"
	UserRequestRoleUser  UserRequestRole = "user"
)

// AllValues returns all UserRequestRole values.
func (UserRequestRole) AllValues() []UserRequestRole {
	return []UserRequestRole{
		UserRequestRoleAdmin,
		UserRequestRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserRequestRole) MarshalText() ([]byte, error) {
	switch s {
	case UserRequestRoleAdmin:
		return []byte(s), nil
	case UserRequestRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserRequestRole) UnmarshalText(data []byte) error {
	switch UserRequestRole(data) {
	case UserRequestRoleAdmin:
		*s = UserRequestRoleAdmin
		return nil
	case UserRequestRoleUser:
		*s = UserRequestRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/UserResponse
type UserResponse struct {
	ID        uuid.UUID        `json:"id"`
	CreatedAt time.Time        `json:"createdAt"`
	Username  string           `json:"username"`
	Role      UserResponseRole `json:"role"`
}

// GetID returns the value of ID.
func (s *UserResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUsername returns the value of Username.
func (s *UserResponse) GetUsername() string {
	return s.Username
}

// GetRole returns the value of Role.
func (s *UserResponse) GetRole() UserResponseRole {
	return s.Role
}

// SetID sets the value of ID.
func (s *UserResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUsername sets the value of Username.
func (s *UserResponse) SetUsername(val string) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *UserResponse) SetRole(val UserResponseRole) {
	s.Role = val
}

type UserResponseRole string

const (
	UserResponseRoleAdmin UserResponseRole = "admin"
	UserResponseRoleUser  UserResponseRole = "user"
)

// AllValues returns all UserResponseRole values.
func (UserResponseRole) AllValues() []UserResponseRole {
	return []UserResponseRole{
		UserResponseRoleAdmin,
		UserResponseRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserResponseRole) MarshalText() ([]byte, error) {
	switch s {
	case UserResponseRoleAdmin:
		return []byte(s), nil
	case UserResponseRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserResponseRole) UnmarshalText(data []byte) error {
	switch UserResponseRole(data) {
	case UserResponseRoleAdmin:
		*s = UserResponseRoleAdmin
		return nil
	case UserResponseRoleUser:
		*s = UserResponseRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UsernamePassword struct {
	Username string
	Password string
	Roles    []string
}

// GetUsername returns the value of Username.
func (s *UsernamePassword) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *UsernamePassword) GetPassword() string {
	return s.Password
}

// GetRoles returns the value of Roles.
func (s *UsernamePassword) GetRoles() []string {
	return s.Roles
}

// SetUsername sets the value of Username.
func (s *UsernamePassword) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *UsernamePassword) SetPassword(val string) {
	s.Password = val
}

// SetRoles sets the value of Roles.
func (s *UsernamePassword) SetRoles(val []string) {
	s.Roles = val
}
