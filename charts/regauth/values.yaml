# Default values for regauth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

initialadmin:
  # -- Name of the secret containing the credentials for the initial admin user. This will only be used on first application start-up, and can be removed afterward.
  secretName: ""
  # -- Key of the username value within the secret.
  secretUsernameKey: "username"
  # -- Key of the password value within the secret.
  secretPasswordKey: "password"

log:
  # -- Log level, can be 'debug', 'info', 'warn' or 'error'
  level: info
  # -- Format of the log entries, can be either 'text' or 'json'.
  formatter: text

database:
  # -- PostgreSQL database host.
  host: ""
  # -- Database name.
  name: regauth
  # -- Database port.
  port: 5432
  # -- Name of the secret containing the database credentials.
  secretName: ""
  # -- Key of the username value within the secret.
  secretUsernameKey: "username"
  # -- Key of the password value within the secret.
  secretPasswordKey: "password"

token:
  # Issuer set in the tokens generated for the registry. Must match the registry configuration.
  issuer: regauth
  # Audience/service set in the tokens generated for the registry. Must match the registry configuration.
  service: registry
  # Signing algorithm to use when signing tokens. All asymmetric JWT signing algorithms are supported. This must match the configured private key.
  alg: ""
  # Name of the secret containing the signing key/certificate.
  secretName: ""
  # -- Filename/key of the certificate within the secret.
  certFilename: ""
  # -- Filename/key of the certificate private key within the secret.
  certKeyFilename: ""

replicaCount: 1

image:
  repository: ghcr.io/evanebb/regauth
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  runAsGroup: 65532
  runAsUser: 65532
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
#    - host: regauth.local
#      paths:
#        - path: /
#          pathType: ImplementationSpecific
  tls: []
#    - secretName: chart-example-tls
#      hosts:
#        - regauth.local

httpRoute:
  enabled: false
  annotations: {}
  parentRefs: []
#    - name: gateway
#      sectionName: http
  hostnames: []
#    - regauth.local
  rules: []
#    - matches:
#        - path:
#            type: PathPrefix
#            value: /

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
